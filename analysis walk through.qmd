---
title: "Analysis Walkthrough"
editor: visual
---

------------------------------------------------------------------------

## Here is an example of filtering and sorting in R Studio:

```{r}
# First load our libraries that will help you complete the next steps
# Specifically, make sure to install the tidyverse if it's not already installed
library(tidyverse)
library(lubridate)
```

```{r}
# Run this line below load the data file in needed for this assignment
# Use a built-in dataset from the ggplot2 package that isloaded as party of the tidyverse we just intalled
housesales <- ggplot2::txhousing
```

```{r}
# This dataset details monthly housing sales by city in Texas from the years 2000-2015
# Look it over before we begin by typing the name of the data set below
housesales
```

```{r}
# The column "year" indicates the year of sales for each city in Texas in this data set
# Filter this data set to return only results from the year 2015 using the filter() function 
housesales %>%
  filter(year == "2015")
```

```{r}
# Similar to the above question, filter results from the year 2010 onward, so 2010-2015
# Use the filter() function as you just did

housesales %>%
  filter(year >= "2010")
```

```{r}
# The "city" column contains the city relevant to the coresponding data. Filter to return only results for Houston
# (remember R is case sensitive when typing in the city name look closely at the data set)

housesales %>%
  filter(city == "Houston")

```

```{r}
# Filter for housesales in Houston in only the year 2010
# Do the same function as above but add the year
# The results should give you 12 records, this means one for each month in 2010 for Houston

housesales %>%
  filter(city == "Houston", year == "2010")

```

```{r}
# Now its time to further bulid on what you've done above by filtering for only the city  Houston and the year 2010 (just like what you did) 
# But, now add a sort using arrange() to sort the results based on the number of home sales in descending order, this means from highest to lowest sales
# Use the sales column in the data when using the arange function

housesales %>%
  filter(city == "Houston", year == "2010") %>%
  arrange(desc(sales))
```

```{r}
# Use the same info as you just did above, except instead of Houston return records for Dallas's housesales in 2010 in descending order

housesales %>%
  filter(city == "Dallas", year == "2010") %>%
  arrange(desc(sales))
```

```{r}
# Sometimes metrics like home sales have a seasonal quality to them, much like retail sales. There are times of year that are naturally more active, and others where it's slower.
# That means sometimes you'll want to isolate the same time period across multiple years to compare how it went based on similar times of year
# Let's do that here: we're going to look only for sales that happened in the month of JUNE
# Filter for the city is Dallas, and the month is June (the number 6)

housesales %>%
  filter(city == "Dallas", month == "6")
```

```{r}
# Build on the past three problems above
# Now that we have June numbers for Dallas for every year, arrange the results by sales in descending order to show what year had the highest sales in June

housesales %>%
  filter(city == "Dallas", month == "6") %>%
  arrange(desc(sales))
```

```{r}
# Now do the same as above, but this time instead of Dallas, show results for the city Corpus Christi in June in descending order

housesales %>%
  filter(city == "Corpus Christi", month == "6") %>%
  arrange(desc(sales))
```

```{r}
# Finally, using the same Corpus Christi line of code from above instead of June use the month of February (2).

housesales %>%
  filter(city == "Corpus Christi", month == "2") %>%
  arrange(desc(sales))
```
